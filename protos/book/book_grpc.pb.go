// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/book/book.proto

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookClient is the client API for Book service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookClient interface {
	GetBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (Book_GetBookClient, error)
}

type bookClient struct {
	cc grpc.ClientConnInterface
}

func NewBookClient(cc grpc.ClientConnInterface) BookClient {
	return &bookClient{cc}
}

func (c *bookClient) GetBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (Book_GetBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &Book_ServiceDesc.Streams[0], "/Book/GetBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookGetBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Book_GetBookClient interface {
	Recv() (*BookResponse, error)
	grpc.ClientStream
}

type bookGetBookClient struct {
	grpc.ClientStream
}

func (x *bookGetBookClient) Recv() (*BookResponse, error) {
	m := new(BookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookServer is the server API for Book service.
// All implementations must embed UnimplementedBookServer
// for forward compatibility
type BookServer interface {
	GetBook(*BookRequest, Book_GetBookServer) error
	mustEmbedUnimplementedBookServer()
}

// UnimplementedBookServer must be embedded to have forward compatible implementations.
type UnimplementedBookServer struct {
}

func (UnimplementedBookServer) GetBook(*BookRequest, Book_GetBookServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookServer) mustEmbedUnimplementedBookServer() {}

// UnsafeBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServer will
// result in compilation errors.
type UnsafeBookServer interface {
	mustEmbedUnimplementedBookServer()
}

func RegisterBookServer(s grpc.ServiceRegistrar, srv BookServer) {
	s.RegisterService(&Book_ServiceDesc, srv)
}

func _Book_GetBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServer).GetBook(m, &bookGetBookServer{stream})
}

type Book_GetBookServer interface {
	Send(*BookResponse) error
	grpc.ServerStream
}

type bookGetBookServer struct {
	grpc.ServerStream
}

func (x *bookGetBookServer) Send(m *BookResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Book_ServiceDesc is the grpc.ServiceDesc for Book service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Book_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Book",
	HandlerType: (*BookServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBook",
			Handler:       _Book_GetBook_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/book/book.proto",
}
